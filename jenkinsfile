pipeline {
    agent any 

    environment {
        MONGODB_URI = credentials('DELIVERY_SERVICE_MONGODB_URI')
    }

    stages {
        stage('clear existing image and container') {
            steps {
                script {
                    sh "echo deleting existing image and container"
                    try {
                        sh "docker kill delivery-service"
                        sh "docker rm delivery-service"
                        sh "docker rmi delivery-service"


                    } catch (Exception e) {
                        echo "No existing image or container to remove"
                    }
                }
            }
        }
        stage('build image') {
            steps {
                script {
                    echo "building image with mongo ${MONGODB_URI}"
                    // Start the application within the running container
                    sh "touch .env && echo DATABASE_URL=${MONGODB_URI} >> .env"
                    sh "docker build -t delivery-service ."
                }
            }
        }
        stage('deploy') {
            steps {
                script {
                    sh "docker run -d --name delivery-service -p 9010:3000 --restart unless-stopped delivery-service"
                }
            }
        }
    }
}

def dockerExec(command) {
    sh "docker exec ${CONTAINER_NAME} ${command}"
}